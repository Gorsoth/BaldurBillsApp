@model BaldurBillsApp.Models.InvoicesList

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>InvoicesList</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label for="Image">Invoice image</label>
                <input type="file" class="form-control" id="Image" name="files" accept="application/pdf" multiple>
            </div>
            <div class="form-group">
                <label asp-for="InvoiceDate" class="control-label"></label>
                <input asp-for="InvoiceDate" class="form-control" />
                <span asp-validation-for="InvoiceDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="InvoiceNumber" class="control-label"></label>
                <input asp-for="InvoiceNumber" class="form-control" />
                <span asp-validation-for="InvoiceNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label"></label>
                <input class="form-control" list="vendors-list" id="vendorInput" placeholder="Start typing to search for a vendor" />
                <datalist id="vendors-list">
                    @foreach (var vendor in ViewBag.vendors)
                    {
                        <option value="@vendor.Text"></option>
                    }
                </datalist>
                <input type="hidden" asp-for="VendorId" id="vendorIdField" />
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <!-- Dynamicznie dodawane pozycje faktury -->
            <div id="invoiceItemsContainer">
                @if (Model != null && Model.InvoiceItems != null)
                {
                    for (int i = 0; i < Model.InvoiceItems.Count; i++)
                    {
                        <div class="invoice-item" id="item-@i">
                            <input asp-for="@Model.InvoiceItems[i].NetAmount" class="form-control" />
                            <input asp-for="@Model.InvoiceItems[i].VatRate" class="form-control" />
                            <input asp-for="@Model.InvoiceItems[i].GrossAmount" class="form-control" />
                            <select asp-for="@Model.InvoiceItems[i].CostId" asp-items="@(new SelectList(ViewBag.CostTypes, "Value", "Text"))"></select>
                            <button type="button" data-index="@i" onclick="removeItem(@i)" class="btn btn-danger">Delete</button>
                        </div>
                    }
                }
            </div>
            <button type="button" onclick="addItem()">Add Item</button>

            <div class="form-group">
                <label asp-for="NetAmount" class="control-label"></label>
                <input asp-for="NetAmount" class="form-control" />
                <span asp-validation-for="NetAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="GrossAmount" class="control-label"></label>
                <input asp-for="GrossAmount" class="form-control" />
                <span asp-validation-for="GrossAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Currency" class="control-label"></label>
                <input class="form-control" list="currencies-list" id="currencyInput" placeholder="Start typing to search for a currency" />
                <datalist id="currencies-list">
                    @foreach (var currency in ViewBag.CurrencyList)
                    {
                        <option value="@currency.Text"></option>
                    }
                </datalist>
                <input type="hidden" asp-for="Currency" id="InvoicesIdField" />
            </div>
            <div class="form-group">
                <label asp-for="DueDate" class="control-label"></label>
                <input asp-for="DueDate" class="form-control" />
                <span asp-validation-for="DueDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="IsPaid" class="control-label"></label>
                <input asp-for="IsPaid" class="form-control" />
                <span asp-validation-for="IsPaid" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PaymentDate" class="control-label"></label>
                <input asp-for="PaymentDate" class="form-control" />
                <span asp-validation-for="PaymentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="RateId" class="control-label"></label>
                <select asp-for="RateId" class ="form-control" asp-items="ViewBag.RateId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        var vendors = @Html.Raw(Json.Serialize(ViewBag.vendors));
        document.getElementById('vendorInput').addEventListener('input', function () {
            var vendorName = this.value;
            var vendor = vendors.find(v => v.text == vendorName);
            if (vendor) {
                document.getElementById('vendorIdField').value = vendor.value;
            } else {
                document.getElementById('vendorIdField').value = null;
            }
        });
    </script>

    <script>
        var currencyList = @Html.Raw(Json.Serialize(ViewBag.CurrencyList));
        document.getElementById('currencyInput').addEventListener('input', function () {
            var currencyName = this.value;
            var currency = currencyList.find(v => v.text == currencyName);
            if (currency) {
                document.getElementById('InvoicesIdField').value = currency.value;
            } else {
                document.getElementById('InvoicesIdField').value = null;
            }
        });
    </script>

    <script>
        function addItem() {


            var container = document.getElementById("invoiceItemsContainer");

            var index = container.children.length; // Pobiera indeks dla nowego elementu
            // Tworzenie nowego diva dla elementu faktury
            var itemDiv = document.createElement("div");
            itemDiv.className = "invoice-item";
            itemDiv.id = `item-${index}`;


            itemDiv.innerHTML = `
                        <input type="text" name="InvoiceItems[${index}].NetAmount" placeholder="Net Amount" class="form-control" onchange="updateGrossAmount(this)" />
                        <input type="text" name="InvoiceItems[${index}].VatRate" placeholder="VAT Rate" class="form-control" onchange="updateGrossAmount(this)" />
                        <input type="text" name="InvoiceItems[${index}].GrossAmount" placeholder="Gross Amount" class="form-control" />
                                <select name="InvoiceItems[${index}].CostId" class="form-control">
        @foreach (var type in ViewBag.costTypes)
        {
                                                <option value="@type.Value">@type.Text</option>
        }
         </select>
                <button type="button" onclick="removeItem(${index})" class="btn btn-danger">Delete</button>`;
            // Dodawanie elementu do kontenera
            container.appendChild(itemDiv);
        }

        function updateGrossAmount(element) {
            var itemDiv = element.closest('.invoice-item'); // Znajdź nadrzędny div dla elementu faktury
            var netAmount = parseFloat(itemDiv.querySelector('input[name^="InvoiceItems["][name$="].NetAmount"]').value) || 0; // Użyj poprawnych selektorów
            var vatRate = parseFloat(itemDiv.querySelector('input[name^="InvoiceItems["][name$="].VatRate"]').value) || 0;
            var grossAmountInput = itemDiv.querySelector('input[name^="InvoiceItems["][name$="].GrossAmount"]');

            var calculatedValue = (netAmount + netAmount * vatRate / 100).toFixed(2);
            grossAmountInput.value = calculatedValue; // Ustawianie wartości
            console.log("Updated Gross Amount to: ", calculatedValue); // Logowanie dla sprawdzenia
        }

        function removeItem(index) {
            var item = document.getElementById(`item-${index}`);
            if (item) {
                item.remove();
            }
        }
    </script>
}
